import streamlit as st
import folium
from streamlit_folium import st_folium
import pandas as pd
import numpy as np
import math
import geopandas as gpd
from shapely.geometry import Polygon, Point
from branca.colormap import LinearColormap
from geopy.geocoders import Nominatim

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.set_page_config(layout="wide", page_title="–≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞ —Ä–∏—Å–∫–æ–≤")
st.title("üåê –ö–∞—Ä—Ç–∞ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–∏—Å–∫–æ–≤")

# –£–º–µ–Ω—å—à–∞–µ–º –≤–µ—Ä—Ö–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã
st.markdown("""
<style>
    .block-container {
        padding-top: 1rem;
        padding-bottom: 1rem;
    }
    .stDataFrame {
        max-height: 300px;
        overflow-y: auto;
    }
</style>
""", unsafe_allow_html=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
if 'center_point' not in st.session_state:
    st.session_state.center_point = [59.954, 30.306]  # –¶–µ–Ω—Ç—Ä –°–ü–±
if 'address' not in st.session_state:
    st.session_state.address = "–ö—Ä–æ–Ω–≤–µ—Ä–∫—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç 49"
if 'precalculated_grid' not in st.session_state:
    st.session_state.precalculated_grid = None


# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_data():
    demo_data = {
        'name': [
            '–•–∏–º–∏—á–µ—Å–∫–∏–π –∑–∞–≤–æ–¥ "–ù–µ–≤–∞"',
            '–ú—É—Å–æ—Ä–æ—Å–∂–∏–≥–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–≤–æ–¥ ‚Ññ4',
            '–¢–≠–¶-2',
            '–ü–æ–ª–∏–≥–æ–Ω –¢–ë–û "–°–µ–≤–µ—Ä–Ω—ã–π"',
            '–ù–µ—Ñ—Ç–µ–±–∞–∑–∞ "–í–æ—Å—Ç–æ—á–Ω–∞—è"',
            '–ê–≤—Ç–æ–º–∞–≥–∏—Å—Ç—Ä–∞–ª—å –ö–ê–î',
            '–ü–æ—Ä—Ç "–ë–æ–ª—å—à–æ–π –ø–æ—Ä—Ç –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"',
            '–ê—ç—Ä–æ–ø–æ—Ä—Ç –ü—É–ª–∫–æ–≤–æ'
        ],
        'lat': [59.985, 59.870, 59.935, 59.920, 59.910, 59.900, 59.880, 59.800],
        'lon': [30.300, 30.480, 30.350, 30.230, 30.200, 30.400, 30.220, 30.260],
        'pollution_level': [9.5, 9.0, 8.5, 8.5, 8.0, 7.5, 7.0, 7.5],
        'danger_level': ['–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π', '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π', '–í—ã—Å–æ–∫–∏–π', '–í—ã—Å–æ–∫–∏–π', '–í—ã—Å–æ–∫–∏–π', '–í—ã—Å–æ–∫–∏–π', '–í—ã—Å–æ–∫–∏–π',
                         '–í—ã—Å–æ–∫–∏–π'],
        'object_type': [
            '–•–∏–º–∏—á–µ—Å–∫–∏–π –∑–∞–≤–æ–¥',
            '–ú—É—Å–æ—Ä–æ—Å–∂–∏–≥–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–≤–æ–¥',
            '–¢–µ–ø–ª–æ—ç–ª–µ–∫—Ç—Ä–æ—Ü–µ–Ω—Ç—Ä–∞–ª—å',
            '–ü–æ–ª–∏–≥–æ–Ω –¢–ë–û',
            '–ù–µ—Ñ—Ç–µ–±–∞–∑–∞',
            '–ê–≤—Ç–æ–º–∞–≥–∏—Å—Ç—Ä–∞–ª—å',
            '–ü–æ—Ä—Ç',
            '–ê—ç—Ä–æ–ø–æ—Ä—Ç'
        ]
    }
    return pd.DataFrame(demo_data)


# –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∫–∏ –¥–ª—è –≤—Å–µ–≥–æ –≥–æ—Ä–æ–¥–∞
def create_full_grid():
    min_lat, max_lat = 59.80, 60.05
    min_lon, max_lon = 30.10, 30.70
    cell_size = 0.0045

    lats = np.arange(min_lat, max_lat, cell_size)
    lons = np.arange(min_lon, max_lon, cell_size)

    grid = []
    for i in range(len(lats) - 1):
        for j in range(len(lons) - 1):
            poly = Polygon([
                (lons[j], lats[i]),
                (lons[j + 1], lats[i]),
                (lons[j + 1], lats[i + 1]),
                (lons[j], lats[i + 1]),
                (lons[j], lats[i])
            ])
            grid.append({
                'geometry': poly,
                'left': lons[j],
                'right': lons[j + 1],
                'bottom': lats[i],
                'top': lats[i + 1]
            })
    return gpd.GeoDataFrame(grid, crs="EPSG:4326")


# –†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞
def calculate_full_risk_grid(grid, sources):
    type_weights = {
        '–•–∏–º–∏—á–µ—Å–∫–∏–π –∑–∞–≤–æ–¥': 1.8,
        '–ú—É—Å–æ—Ä–æ—Å–∂–∏–≥–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–≤–æ–¥': 1.7,
        '–¢–µ–ø–ª–æ—ç–ª–µ–∫—Ç—Ä–æ—Ü–µ–Ω—Ç—Ä–∞–ª—å': 1.4,
        '–ü–æ–ª–∏–≥–æ–Ω –¢–ë–û': 1.6,
        '–ù–µ—Ñ—Ç–µ–±–∞–∑–∞': 1.5,
        '–ê–≤—Ç–æ–º–∞–≥–∏—Å—Ç—Ä–∞–ª—å': 1.2,
        '–ü–æ—Ä—Ç': 1.3,
        '–ê—ç—Ä–æ–ø–æ—Ä—Ç': 1.4
    }

    risks = []
    for idx, cell in grid.iterrows():
        cell_center = cell['geometry'].centroid
        total_risk = 0

        for _, source in sources.iterrows():
            distance = haversine_distance(
                cell_center.y, cell_center.x,
                source['lat'], source['lon']
            )
            weight = type_weights.get(source['object_type'], 1.0)
            risk = source['pollution_level'] * weight / (1 + distance / 500)
            total_risk += risk

        risks.append(total_risk)

    max_risk = max(risks) if risks else 1
    grid['risk_level'] = [r / max_risk * 10 for r in risks]
    return grid


# –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
def haversine_distance(lat1, lon1, lat2, lon2):
    R = 6371000
    phi1 = math.radians(lat1)
    phi2 = math.radians(lat2)
    delta_phi = math.radians(lat2 - lat1)
    delta_lambda = math.radians(lon2 - lon1)

    a = math.sin(delta_phi / 2) ** 2 + math.cos(phi1) * math.cos(phi2) * math.sin(delta_lambda / 2) ** 2
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))

    return R * c


# –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
def geocode_address(address):
    geolocator = Nominatim(user_agent="eco_risk_map")
    try:
        location = geolocator.geocode(address + ", –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥")
        if location:
            return [location.latitude, location.longitude]
    except:
        pass
    return None


# –ò–∫–æ–Ω–∫–∏ –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤
def get_icon_for_type(obj_type):
    icons = {
        '–•–∏–º–∏—á–µ—Å–∫–∏–π –∑–∞–≤–æ–¥': 'industry',
        '–ú—É—Å–æ—Ä–æ—Å–∂–∏–≥–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–≤–æ–¥': 'fire',
        '–¢–µ–ø–ª–æ—ç–ª–µ–∫—Ç—Ä–æ—Ü–µ–Ω—Ç—Ä–∞–ª—å': 'bolt',
        '–ü–æ–ª–∏–≥–æ–Ω –¢–ë–û': 'trash',
        '–ù–µ—Ñ—Ç–µ–±–∞–∑–∞': 'oil-can',
        '–ê–≤—Ç–æ–º–∞–≥–∏—Å—Ç—Ä–∞–ª—å': 'road',
        '–ü–æ—Ä—Ç': 'ship',
        '–ê—ç—Ä–æ–ø–æ—Ä—Ç': 'plane'
    }
    return icons.get(obj_type, 'circle')


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
def create_risk_map(grid, sources, center, radius=2000):
    m = folium.Map(location=center, zoom_start=13,
                   tiles='CartoDB positron',
                   control_scale=True,
                   width='100%',
                   height='100%')

    colormap = LinearColormap(['#00ff00', '#ffff00', '#ff0000'], vmin=0, vmax=10)

    # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–µ—Ç–∫–∞ —Å –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
    for idx, row in grid.iterrows():
        cell_center = Point((row['left'] + row['right']) / 2, (row['bottom'] + row['top']) / 2)
        distance = haversine_distance(
            center[0], center[1],
            cell_center.y, cell_center.x
        )

        if distance <= radius and row['risk_level'] > 0.1:
            folium.Polygon(
                locations=[
                    [row['bottom'], row['left']],
                    [row['bottom'], row['right']],
                    [row['top'], row['right']],
                    [row['top'], row['left']],
                    [row['bottom'], row['left']]
                ],
                color=colormap(row['risk_level']),
                fill=True,
                fill_opacity=0.5,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
                weight=0.3,  # –¢–æ–Ω–∫–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã
                tooltip=f"–†–∏—Å–∫: {row['risk_level']:.2f}"
            ).add_to(m)

    # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
    for _, source in sources.iterrows():
        icon_name = get_icon_for_type(source['object_type'])
        folium.Marker(
            [source['lat'], source['lon']],
            popup=f"<b>{source['name']}</b>",
            icon=folium.Icon(color='black', icon=icon_name, prefix='fa')
        ).add_to(m)

    # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –º–∞—Ä–∫–µ—Ä
    folium.Marker(
        center,
        popup="–¶–µ–Ω—Ç—Ä –∞–Ω–∞–ª–∏–∑–∞",
        icon=folium.Icon(color='blue', icon='star', prefix='fa')
    ).add_to(m)

    # –û–±–ª–∞—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞
    folium.Circle(
        location=center,
        radius=radius,
        color='#0066cc',
        fill=True,
        fill_opacity=0.1,
        weight=1
    ).add_to(m)

    colormap.add_to(m)
    return m


# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
data = load_data()

# –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Å–∞–π–¥–±–∞—Ä
with st.sidebar:
    st.header("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", type="csv")
    if uploaded_file:
        user_data = pd.read_csv(uploaded_file)
        st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(user_data)} –æ–±—ä–µ–∫—Ç–æ–≤!")
        data = user_data

    # –ü–æ–∏—Å–∫ –ø–æ –∞–¥—Ä–µ—Å—É
    new_address = st.text_input("–ê–¥—Ä–µ—Å –ø–æ–∏—Å–∫–∞:", st.session_state.address)
    search_radius = st.slider("–†–∞–¥–∏—É—Å –∞–Ω–∞–ª–∏–∑–∞ (–º):", 500, 5000, 2000)

    if st.button("–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ"):
        new_center = geocode_address(new_address)
        if new_center:
            st.session_state.center_point = new_center
            st.session_state.address = new_address
            st.success("–ê–¥—Ä–µ—Å –Ω–∞–π–¥–µ–Ω!")
        else:
            st.error("–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!")

# –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å–µ—Ç–∫–∏
if st.session_state.precalculated_grid is None:
    with st.spinner('–ò–¥–µ—Ç —Ä–∞—Å—á–µ—Ç –∫–∞—Ä—Ç—ã —Ä–∏—Å–∫–æ–≤...'):
        full_grid = create_full_grid()
        st.session_state.precalculated_grid = calculate_full_risk_grid(full_grid, data)

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç - —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç–∞
if st.session_state.precalculated_grid is not None:
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–π —ç–∫—Ä–∞–Ω
    st_folium(
        create_risk_map(
            st.session_state.precalculated_grid,
            data,
            st.session_state.center_point,
            radius=search_radius
        ),
        width=1600,
        height=800,
        key="map"
    )
else:
    st.warning("–ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞—Å—á–µ—Ç—ã...")

# –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –ª–µ–≥–µ–Ω–¥–∞
st.caption("""
**–õ–µ–≥–µ–Ω–¥–∞:** 
<span style="color:green">–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫</span> | 
<span style="color:yellow">–°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫</span> | 
<span style="color:red">–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫</span> | 
<i class="fa fa-star"></i> –¶–µ–Ω—Ç—Ä –∞–Ω–∞–ª–∏–∑–∞
""")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º FontAwesome
st.markdown("""
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
""", unsafe_allow_html=True)
